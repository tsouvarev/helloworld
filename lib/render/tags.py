import re
from dataclasses import asdict, dataclass, field
from functools import partial, reduce
from itertools import count
from typing import Callable, Dict, Iterable, List, Tuple

from funcy import post_processing

from ..config import SHORT_DURATION, TODAY, Currency, Level, Vendor
from ..utils import format_int
from .exchange import get_exchange, to_rub


@dataclass
class Tag:
    for_json = asdict
    slug: str
    text: str
    title: str = ''
    active: bool = False
    bit: int = field(init=False)
    index: int = field(init=False)

    def __and__(self, other):
        return self.bit & other

    __rand__ = __and__

    def __hash__(self):
        return hash(self.slug)


@dataclass
class TagGroup:
    slug: str
    tags: Iterable[Tag]
    title: str = ''
    index: int = field(  # type: ignore
        init=False,
        default_factory=partial(next, count(0)),
    )
    processors: List[Callable[['TagGroup'], None]] = field(
        default_factory=list
    )

    def __post_init__(self):
        for i, tag in enumerate(self.tags):
            tag.index = self.index
            tag.bit = 1 << i

    def __iter__(self):
        return (x for x in self.tags if x.active)

    def for_json(self):
        for p in self.processors:
            p(self)

        return {
            'title': self.title,
            'slug': self.slug,
            'tags': iter(self),
            'bits': reduce(lambda a, b: a | b.bit, self.tags, 0),
        }


def finder(pattern: str) -> Callable[[str], bool]:
    findall = re.compile(pattern, re.I).findall
    return lambda src: bool(findall(src))


def regroup(*args: str, begin: str = r'\b') -> str:
    return begin + '(%s)' % '|'.join(args)


NEW = Tag(slug='new', title='–Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ', text='–Ω–æ–≤—ã–µ')
KIDS = Tag(slug='kids', title='—Å –¥–µ—Ç—å–º–∏', text='üë∂')
HIKING = Tag(slug='hiking', title='–ø–µ—à–∏–π', text='ü•æ')
kids_finder = finder(r'\b(—Å–µ–º—å–∏|—Å–µ–º–µ–π|–¥–µ—Ç—Å–∫|[0-9]+\+)')
FinderDict = Dict[Tag, Callable[[str], bool]]

TYPES: FinderDict = {
    Tag(slug='rafting', title='—Å–ø–ª–∞–≤', text='üõ∂'): finder(
        r'\b(—Å–ø–ª–∞–≤|–≤–æ–¥–Ω|–±–∞–π–¥–∞—Ä)'
    ),
    Tag(slug='bicycle', title='–≤–µ–ª–æ–ø–æ—Ö–æ–¥', text='üö¥'): finder(r'\b–≤–µ–ª–æ'),
    Tag(slug='horse', title='–∫–æ–Ω–Ω—ã–π', text='üêé'): finder(r'\b–∫–æ–Ω–Ω—ã'),
    Tag(slug='snowmobile', title='–Ω–∞ —Å–Ω–µ–≥–æ—Ö–æ–¥–∞—Ö', text='üõ∑'): finder(
        r'\b(—Å–Ω–µ–≥–æ—Ö–æ–¥[–∞-—è]+)'
    ),
    Tag(slug='ski', title='–ª—ã–∂–Ω—ã–π', text='‚õ∑Ô∏è'): finder(
        r'\b((–≥–æ—Ä–Ω–æ–ª—ã–∂|–ª—ã–∂)[–∞-—è]+)'
    ),
    Tag(slug='pick', title='–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', text='‚õèÔ∏è'): finder(r'\b–≤–æ—Å—Ö–æ–∂–¥–µ–Ω'),
    Tag(slug='auto', title='–∞–≤—Ç–æ—Ç—É—Ä', text='üöó'): finder(
        r'\b(—Å–∞—Ñ–∞—Ä–∏|–∞–≤—Ç–æ|–¥–∂–∏–ø|–∞–ª—å–ø–∏–Ω)'
    ),
    Tag(slug='yoga', title='–π–æ–≥–∞', text='üßò‚Äç‚ôÇÔ∏è'): finder(r'\b–π–æ–≥'),
    Tag(slug='freediving', title='—Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥', text='ü§ø'): finder(
        r'\b—Ñ—Ä–∏–¥–∞–π–≤–∏–Ω–≥'
    ),
}

PLACES_RF: FinderDict = {
    Tag(slug='kamcha', text='–∫–∞–º—á–∞—Ç–∫–∞'): finder(
        r'\b(–∫–∞–º—á–∞—Ç|—Ç–æ–ª–±–∞—á|—Å–æ–ø–∫|–∫–æ–º–∞–Ω–¥–æ—Ä|–Ω–∞–ª—ã—á|–∞–≤–∞—á)'
    ),
    Tag(slug='sahalin', text='—Å–∞—Ö–∞–ª–∏–Ω'): finder(
        r'\b(—Å–∞—Ö–∞–ª–∏–Ω|–∫—É—Ä–∏–ª|—à–∏–∫–æ—Ç–∞–Ω|–∏—Ç—É—Ä—É–ø)'
    ),
    Tag(slug='altay', text='–∞–ª—Ç–∞–π'): finder(
        r'\b(–∞–ª—Ç–∞|–º—É–ª—å—Ç–∏–Ω—Å–∫|—à–∞–≤–ª–∏–Ω—Å–∫|–º–∞–∞—à|j–∞–π–≥—ã|—á—É–π—Å–∫)'
    ),
    Tag(slug='elbrus', text='—ç–ª—å–±—Ä—É—Å'): finder(r'—ç–ª—å–±—Ä—É—Å'),
    Tag(slug='baikal', text='–±–∞–π–∫–∞–ª'): finder(r'–±–∞–π–∫–∞–ª'),
    Tag(slug='south', text='—é–≥'): finder(
        regroup(
            '–∫—Ä—ã–º',
            '—Å–µ–≤–∞—Å—Ç–æ–ø–æ–ª',
            '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä',
            '—Å–æ—á[–∏,–∞]',
            '–¥–µ–º–µ—Ä–¥–∂',
            '-–¥–∞–≥\b',
            '–º–µ–∑–º–∞',
            '–∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞',
            '—á–µ—Ä–Ω[–∞-—è ]+–º–æ—Ä[–∞-—è]+',
            '—Ç–∞–≤—Ä–∏–¥',
        )
    ),
    Tag(slug='north', text='—Å–µ–≤–µ—Ä'): finder(
        regroup(
            '–∫–∞—Ä–µ–ª',
            '—Ö–∏–±–∏–Ω',
            '–º—É—Ä–º–∞–Ω—Å–∫',
            '—Ç–µ—Ä–∏–±–µ—Ä–∫',
            '–ø—É—Ç–æ—Ä–∞–Ω',
            '–ª–µ–Ω–æ–±–ª–∞—Å—Ç',
            r'–ª–∞–¥–æ[–≥,–∂]',
            '—Ä—É—Å—Å–∫–∏–π —Å–µ–≤–µ—Ä',
            '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥',
            '–ø–∏—Ç–µ—Ä',
            '–ø–µ—Ç–µ—Ä–±—É—Ä',
            '–ª–æ–≤–æ–∑–µ—Ä',
            '–±–µ–ª[–∞-—è ]+–º–æ—Ä[–∞-—è]+',
            '–∫–∏–∂–∏',
            '—Å–æ–ª–æ–≤–µ—Ü–∫',
            '—Ä—É—Å—Å–∫–∞—è –ª–∞–ø–ª–∞–Ω–¥–∏—è',
            r'—Å—è–ø—Å—è\-—à—É[–π,—è]',
            '–ø–∏—Å—Ç–∞–π–æ–∫–∏',
            '—Å—É–Ω—Å–∫',
            '—Å–µ–π–¥–æ–∑–µ—Ä',
        )
    ),
    Tag(slug='caucasus_rf', text='–∫–∞–≤–∫–∞–∑',): finder(
        regroup(
            '–∫–∞–≤–∫–∞–∑',
            '–¥–∞–≥–µ—Å—Ç',
            '–∞—Ä—Ö—ã–∑',
            '–∞–¥—ã–≥–µ',
            '–∞–±—Ö–∞–∑',
            '—á–µ—á–Ω',
            '–æ—Å–µ—Ç–∏',
            '–¥–∂–∏–ª—ã',
            '–ø—à–µ—Ö–∞',
            '–∏–Ω–≥—É—à–µ—Ç',
            '—Ç—Ö–∞—á',
            r'–ª–∞–≥–æ-–Ω–∞–∫–∏',
            '–∫–æ–¥–æ—Ä',
            '—Ü–µ–π—Å–∫',
            '—á–µ–≥–µ–º',
            '–±–µ–∑–µ–Ω–≥',
            '–¥–æ–º–±–∞[–π,–µ]',
            '—Ñ–∏—à—Ç',
            '—Å–æ—Ñ–∏–π—Å–∫',
            '–∞–∫—Å–∞—É—Ç',
            '–ø–∞—Å—Ç—É—Ö–æ–≤',
            '—á–µ–¥—ã–º',
            '–∏–º–µ—Ä–µ—Ç–∏–Ω',
        ),
    ),
    Tag(slug='arctica', text='–∞—Ä–∫—Ç–∏–∫–∞'): finder(r'(—à–ø–∏—Ü–±–µ—Ä–≥–µ–Ω|–∞—Ä–∫—Ç–∏|—Ñ—Ä–∞–Ω—Ü–∞)'),
    Tag(
        slug='siberia',
        text='—Å–∏–±–∏—Ä—å, —É—Ä–∞–ª, –¥–≤',
        title='–°–∏–±–∏—Ä—å, –£—Ä–∞–ª, –î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫',
    ): finder(
        regroup(
            '—è–∫—É—Ç',
            '—Ç–∞–≥–∞–Ω–∞',
            '–±–∞—à–∫–∏—Ä',
            '—Å–∏–±–∏—Ä',
            '–æ–ª—å—Ö–æ–Ω',
            '—Å–∞—è–Ω',
            '–µ—Ä–≥–∞–∫',
            '–º–∞–Ω—å–ø—É–ø—É–Ω–µ—Ä',
            '—É—Ä–∞–ª',
            '–¥—è—Ç–ª–æ–≤',
            '—Ö–∞–∫–∞—Å',
            '—á—É–∫–æ—Ç',
            '–∞–º—É—Ä',
            '—à–∞–Ω—Ç–∞—Ä',
        )
    ),
}
OTHER_PLACES = Tag(slug='other_place', text='–æ—Å—Ç–∞–ª—å–Ω–æ–µ')


PLACES_WORLD: FinderDict = {
    Tag(slug='turkey_cyprus', text='—Ç—É—Ä—Ü–∏—è, –∫–∏–ø—Ä'): finder(
        r'\b(—Ç—É—Ä—Ü–∏|–∫–∞–ø–ø–∞–¥–æ–∫|–ª–∏–∫–∏[–π,—è]|–∫–∏–ø—Ä)'
    ),
    Tag(slug='nepal', text='–Ω–µ–ø–∞–ª', title='–ù–µ–ø–∞–ª, –≠–µ–≤–µ—Ä–µ—Å—Ç'): finder(
        r'\b(–Ω–µ–ø–∞–ª|—ç–≤–µ—Ä–µ—Å—Ç|–∞–Ω–Ω–∞–ø—É—Ä–Ω|–º–µ—Ä–∞[- ]–ø–∏–∫|–≥–∏–º–∞–ª)'
    ),
    Tag(slug='africa', text='–∞—Ñ—Ä–∏–∫–∞'): finder(
        regroup(
            '–∞–ª–∂–∏—Ä',
            '–∞—Ñ—Ä–∏–∫',
            '–µ–≥–∏–ø–µ—Ç',
            '–∑–∞–º–±–∏',
            '–∑–∞–Ω–∑–∏–±–∞—Ä',
            '–∑–∏–º–±–∞–±–≤–µ',
            '–∫–µ–Ω–∏[—è,–π,–∏]',
            '–∫–∏–ª–∏–º–∞–Ω–¥–∂–∞—Ä',
            '–∫–æ–Ω–≥–æ',
            '–º–∞–¥–∞–≥–∞—Å–∫–∞—Ä',
            '–º–∞—Ä–æ–∫–∫',
            '–Ω–∞–º–∏–±–∏',
            '–Ω–∏–≥–µ—Ä',
            '—Å–µ–π—à–µ–ª',
            '—Å—É–¥–∞–Ω',
            '—Ç–∞–Ω–∑–∞–Ω',
            '—Ç—É–Ω–∏—Å',
            '—ç—Ñ–∏–æ–ø',
            '—é–∞—Ä',
            'eua',
            '—Ç–æ–Ω–≥–∞',
        )
    ),
    Tag(slug='america', text='–∞–º–µ—Ä–∏–∫–∞'): finder(
        regroup(
            '–∞–º–µ—Ä–∏–∫',
            '–∞—Ä–≥–µ–Ω—Ç–∏–Ω',
            '–±–æ–ª–∏–≤',
            '–±—Ä–∞–∑–∏–ª',
            '–≤–µ–Ω–µ—Å—É—ç–ª',
            '–≥–∞–ª–∞–ø–∞–≥–æ—Å',
            '–¥–æ–º–µ–Ω–∏–∫–∞–Ω',
            '–∫–æ–ª—É–º–±',
            '–∫–∞–Ω–∞–¥',
            '–∫—É–±[–∞,–µ,–∏]',
            '–º–µ–∫—Å–∏–∫',
            '–ø–∞–Ω–∞–º',
            '–ø–∞—Ä–∞–≥–≤–∞',
            '–ø–µ—Ä—É',
            '—Å–∞–ª—å–≤–∞–¥–æ—Ä',
            '—Å—à–∞',
            '—É—Ä—É–≥–≤–∞',
            '—á–∏–ª–∏',
            '—ç–∫–≤–∞',
            '—è–º–∞–π–∫',
            r'–∫–æ—Å—Ç–∞-—Ä–∏–∫',
        )
    ),
    Tag(
        slug='caucasus',
        text='–∫–∞–≤–∫–∞–∑',
        title='–ê—Ä–º–µ–Ω–∏—è, –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω, –ì—Ä—É–∑–∏—è',
    ): finder(
        r'\b(–∞—Ä–º–µ–Ω|–≥—Ä—É–∑–∏|—Å–≤–∞–Ω–µ—Ç–∏|–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω|–∫–∞–∑–±–µ–∫|—Ç—É—à–µ—Ç|—Ö–µ–≤—Å—É—Ä–µ—Ç|—á–µ—Ä–¥—ã–º)'
    ),
    Tag(slug='asia', text='–∞–∑–∏—è',): finder(
        regroup(
            '–∞—Ä–∞–≤–∏',
            '–≤—å–µ—Ç–Ω–∞–º',
            '–∏–∑—Ä–∞–∏–ª',
            '–∏–Ω–¥–∏',
            '–∏–Ω–¥–æ–Ω–µ–∑',
            '–∏–æ—Ä–¥–∞–Ω',
            '–∏—Ä–∞–Ω',
            '–∫–∞–º–±–æ–¥–∂',
            '–∫–∏—Ç–∞–π',
            '–∫–æ—Ä–µ[–π,—è]',
            '–º–∞–ª–∞–π–∑',
            '–º–∞–ª—å–¥–∏–≤',
            '–º–∞–Ω–≥–æ–ª',
            '–æ–∞—ç',
            '–ø–∞–∫–∏—Å—Ç–∞–Ω',
            '—Å–∞—É–¥–æ–≤—Å–∫',
            '—Ç–∞–∏–ª–∞–Ω–¥',
            '—Ñ–∏–ª–∏–ø–ø–∏–Ω',
            r'—à—Ä–∏-–ª–∞–Ω–∫',
            '—è–ø–æ–Ω',
        )
    ),
    Tag(
        slug='sng',
        text='—Å–Ω–≥',
        title='–ö–∏—Ä–≥–∏–∑–∏—è, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –£–∫—Ä–∞–∏–Ω–∞',
    ): finder(r'\b(–∫–∏—Ä–≥–∏–∑|—Ç–∞–¥–∂–∏–∫|—É–∑–±–µ–∫|–∫–∞–∑–∞—Ö|–º–∞–Ω–≥—ã—à–ª–∞–∫|–∫–∞—Ä–ø–∞—Ç|—É–∫—Ä–∞–∏–Ω)'),
    Tag(slug='europe', text='–µ–≤—Ä–æ–ø–∞'): finder(
        regroup(
            '–∞–≤—Å—Ç—Ä–∏',
            '–∞–≥–ª–∏',
            '–∞–∑–æ—Ä',
            '–±–µ–ª–≥',
            '–±–æ–ª–≥–∞—Ä',
            '–±—Ä–∏—Ç–∞–Ω',
            '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω',
            '–≤–µ–Ω–≥—Ä',
            '–≥–µ—Ä–º–∞–Ω',
            '–≥–æ–ª–ª–∞–Ω–¥',
            '–≥—Ä–µ—Ü–∏',
            '–≥—Ä–µ–Ω–ª–∞–Ω–¥',
            '–¥–∞–Ω–∏',
            '–∏—Ä–ª–∞–Ω–¥',
            '–∏—Å–ª–∞–Ω–¥',
            '–∏—Å–ø–∞–Ω',
            '–∏—Ç–∞–ª',
            '–ª–∞—Ç–≤',
            '–ª–∏—Ç–≤',
            '–º–∞–¥–µ–π—Ä',
            '–Ω–∏–¥–µ—Ä–ª–∞–≥–¥',
            '–Ω–æ—Ä–≤–µ',
            '–ø–æ–ª—å—à',
            '–ø–æ—Ä—Ç—É–≥–∞–ª',
            '—Ä—É–º—ã–Ω',
            '—Ñ–∏–Ω–ª—è–Ω–¥',
            '—Ñ—Ä–∞–Ω—Ü–∏',
            '—á–µ—Ä–Ω–æ–≥–æ—Ä',
            '—á–µ—Ö–∏',
            '—à–≤–µ–π—Ü–∞—Ä',
            '—à–≤–µ—Ü',
            '—à–æ—Ç–ª–∞–Ω–¥',
            '—ç—Å—Ç–æ–Ω',
            '–∞–ª—å–ø(?!–∏)',
            '–∞–ª–∞–Ω–¥—Å–∫',
        )
    ),
}

SHORT = Tag(slug='short', text='–ø–≤–¥')
LONG = Tag(slug='long', text='–¥–æ–ª–≥–∏–µ')
VENDOR_TAGS = [
    Tag(slug=Vendor.PIK, text='–ø–∏–∫'),
    Tag(slug=Vendor.ORANGEKED, text='–æ—Ä–∞–Ω–∂–µ–≤—ã–π –∫–µ–¥'),
    Tag(slug=Vendor.CITYESCAPE, text='cityescape'),
    Tag(slug=Vendor.ZOVGOR, text='–∑–æ–≤ –≥–æ—Ä'),
    Tag(slug=Vendor.NAPRAVLENIE, text='–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'),
    Tag(slug=Vendor.TEAMTRIP, text='team trip'),
    Tag(slug=Vendor.PEREHOD, text='–ø–µ—Ä–µ—Ö–æ–¥'),
    Tag(slug=Vendor.STRANNIK, text='—Å—Ç—Ä–∞–Ω–Ω–∏–∫'),
    Tag(slug=Vendor.MYWAY, text='myway'),
    Tag(slug=Vendor.PRO_ADVENTURE, text='pro-adventure'),
    Tag(slug=Vendor.STRANAVETROV, text='—Å—Ç—Ä–∞–Ω–∞ –≤–µ—Ç—Ä–æ–≤'),
]
VENDOR_MAP = {t.slug: t for t in VENDOR_TAGS}

LEVELS_TAGS = [
    Tag(slug='level_1', text='–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ'),
    Tag(slug='level_2', text='–ø—Ä–æ—Å—Ç–æ'),
    Tag(slug='level_3', text='—Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'),
    Tag(slug='level_4', text='—Å–ª–æ–∂–Ω–æ'),
    Tag(slug='level_5', text='–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ'),
]

MONTH_TAGS = [
    Tag(slug='month_1', text='—è–Ω–≤'),
    Tag(slug='month_2', text='—Ñ–µ–≤'),
    Tag(slug='month_3', text='–º–∞—Ä'),
    Tag(slug='month_4', text='–∞–ø—Ä'),
    Tag(slug='month_5', text='–º–∞–π'),
    Tag(slug='month_6', text='–∏—é–Ω'),
    Tag(slug='month_7', text='–∏—é–ª'),
    Tag(slug='month_8', text='–∞–≤–≥'),
    Tag(slug='month_9', text='—Å–µ–Ω'),
    Tag(slug='month_10', text='–æ–∫—Ç'),
    Tag(slug='month_11', text='–Ω–æ—è'),
    Tag(slug='month_12', text='–¥–µ–∫'),
]

PRICE_TAGS = {
    5000: Tag(slug='5000', text='–¥–æ ' + format_int(5000)),
    10000: Tag(slug='10000', text='–¥–æ ' + format_int(10000)),
    30000: Tag(slug='30000', text='–¥–æ ' + format_int(30000)),
    50000: Tag(slug='50000', text='–¥–æ ' + format_int(50000)),
    70000: Tag(slug='70000', text='–¥–æ ' + format_int(70000)),
    100000: Tag(slug='100000', text='–¥–æ ' + format_int(100000)),
    999999: Tag(slug='999999', text='–æ—Ç ' + format_int(100000)),
}


def set_exchange(g: TagGroup):
    """
    Sets Central Bank Exchange rate as tag group title
    """

    g.title = '{} {}, {} {}'.format(
        Currency.USD,
        get_exchange()[Currency.USD],
        Currency.EUR,
        get_exchange()[Currency.EUR],
    )


TAGS: Tuple[TagGroup, ...] = (
    TagGroup(slug='vendors', tags=VENDOR_TAGS),
    TagGroup(slug='new', tags=[NEW]),
    TagGroup(slug='levels', title='–°–ª–æ–∂–Ω–æ—Å—Ç—å', tags=LEVELS_TAGS),
    TagGroup(slug='age', tags=[KIDS]),
    TagGroup(slug='types', tags=list(TYPES) + [HIKING]),
    TagGroup(
        title='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        slug='durations',
        tags=[SHORT, LONG],
    ),
    TagGroup(title='–ú–µ—Å—è—Ü', slug='months', tags=MONTH_TAGS),
    TagGroup(
        title='–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö',
        slug='price',
        tags=PRICE_TAGS.values(),
        processors=[set_exchange],
    ),
    TagGroup(title='–†–æ—Å—Å–∏—è', slug='places', tags=list(PLACES_RF)),
    TagGroup(
        title='–ú–∏—Ä', slug='places', tags=list(PLACES_WORLD) + [OTHER_PLACES]
    ),
)


def reduce_bits(tags):
    result = [0] * len(TAGS)
    for tag in tags:
        tag.active = True
        result[tag.index] |= tag.bit
    return result


@post_processing(reduce_bits)
def get_tags(src: dict):
    yield VENDOR_MAP[src['vendor']]

    if src['new']:
        yield NEW

    for tag, find in TYPES.items():
        if find(src['norm']):
            yield tag
            break
    else:
        yield HIKING

    for tag, find in PLACES_RF.items():
        if find(src['norm']):
            yield tag
            break
    else:
        for tag, find in PLACES_WORLD.items():
            if find(src['norm']):
                yield tag
                break
        else:
            yield OTHER_PLACES

    # fixme: kids tag duck style
    level = src['level']
    if src['for_kids'] or kids_finder(src['norm']):
        yield KIDS
        if not level:
            # If guessed the level (i.e. eq is None),
            # then put EASY level,
            # cause it's for kids
            level = Level.EASY

    yield LEVELS_TAGS[(level or Level.MEDIUM) - 1]

    # duration
    if (src['end'] - src['start']) < SHORT_DURATION:
        yield SHORT
    else:
        yield LONG

    for m, month in enumerate(MONTH_TAGS, 1):
        start, end = src['start'].replace(day=1), src['end'].replace(day=1)

        date = TODAY.replace(month=m, day=1)
        if TODAY.month > m:
            date = date.replace(year=date.year + 1)

        if start <= date <= end:
            yield month

    price = to_rub(src['price'], src['currency'])
    if price:
        for k, v in PRICE_TAGS.items():
            tag = v
            if k >= price:
                yield tag
                break
